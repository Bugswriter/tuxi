#!/usr/bin/env sh


###############################
#####      Functions      #####
###############################

# Version text should remain simple btw.
version_text() {
    printf "tuxi 1.1.4\n"
}

help_text() {
    printf "%bUsage:%b tuxi %b[options]%b %bquery%b\n"  "$G" "$N"  "$Y" "$N"  "$M" "$N"
    printf "\n"
    printf "%bOptions:%b\n"                             "$G" "$N"

    printf "  -v                    Print version number and exit.\n"
    printf "  -h                    Show this help message and exit.\n"
    printf "  -r                    Raw search results.\n"
    printf "                        (no pretty output, no colors)\n"
    printf "  -d                    Debug file for log.\n"
    printf "  -q                    Only output search results.\n"
    printf "                        (silences \"Did you mean?\", greeting, usage)\n"
    printf "\n"
    printf "%bReport bugs at%b %bhttps://github.com/Bugswriter/tuxi/issues%b\n"  "$G" "$N"  "$C" "$N"
}

# Checks if dependencies are installed.
check_deps() {
    while [ -n "$1" ]; do
        if [ ! "$(command -v $1)" ]; then
            error_msg "\"$1\" not found!"
            exit 2
        fi
        shift
    done
}

info_msg() {
    printf "%b>%b %s\n"  "$G" "$N" "$*"
}

error_msg() {
    printf "%b%s%b\n"  "$R" "$*" "$N"
}


#############################
##### Dependency check  #####
#############################

# pup : https://github.com/ericchiang/pup
# recode : https://github.com/rrthomas/recode
# jq : https://github.com/stedolan/jq
check_deps "pup" "recode" "jq"


###############################
#####       Defaults      #####
###############################

# color codes
N="\033[0m"    # Reset
R="\033[1;31m" # Red
G="\033[1;32m" # Green
Y="\033[1;33m" # Yellow
M="\033[1;35m" # Magenta
C="\033[1;36m" # Cyan

# options
raw=false
quiet=false
debug=false
all=false
location=false; loc=""

# search result output format (changes if raw=true)
output() {
    printf "%b---%b\n%s\n%b---%b\n"  "$G" "$N" "$*" "$G" "$N"
}

# recode for character compatibility
recd() {
    recode html..ISO-8859-1
}

# give location true result
modifyloc() {
    loc="$(echo "$google_html" | pup 'span.Q8LRLc text{}' | recd)"
}

# test after snippet is called
snipcall() {
    if [ "$all" = "false" ]; then
        [ -n "$1" ] && output "$1" "$loc" && exit 0
    else
        [ -n "$1" ] && output "$1" "$loc"
    fi
}


#############################
#####     Getopts       #####
#############################

# -v : version
# -h : help
# -r : raw search result
# -q : silences greeting and did you mean
# -d : debug mode
# -a : try all snippets

while getopts "vhrqdal" OPT; do
    case "$OPT" in
    v)
        version_text
        exit 0
        ;;
    h)
        help_text
        exit 0
        ;;
    r)
        raw=true
        ;;
    q)
        quiet=true
        ;;
    d)
        debug=true
        ;;
    a)
        all=true
        ;;
    l)
        location=true
        ;;
    *)
        help_text | head -n 1
        exit 1
    esac
done

# shifts to query
shift $((OPTIND-1))


#############################
#####   Raw formatting  #####
#############################

# If raw=true: No colors, No pretty output
if $raw; then
    N=""; R=""; G=""; Y=""; M=""; C="";

    output () {
        printf "%s\n" "$*"
    }
fi

#############################
#####    Query check    #####
#############################

# If query is empty: exit
# If quiet=false: Prints greeting and usage
if [ -z "$1" ]; then
    if [ $quiet = "false" ]; then
        printf "Hi, I'm Tuxi. Ask me anything!\n"
        help_text | head -n 1
    fi
    exit 0
fi

# Else, all arguments are saved in $query
query="$*"


##############################
##### Snippet extraction #####
##############################

user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:53.0) Gecko/20100101 Firefox/53.0"
google_url="https://www.google.com/search?hl=en_US"


# Response from Google via cURL (-G: get, -s: silent)
google_html=$(curl -Gs --compressed "$google_url" --user-agent "$user_agent" --data-urlencode "q=$query")

# Debug only: Outputs HTML to $HOME/.cache/tuxi/ and exits
if $debug; then
    mkdir -p "$HOME/.cache/tuxi"

    file_name="tuxi-$(date +%s)-$(printf %s "$query" | sed 's/ /_/g').html"
    html_location="$HOME/.cache/tuxi/$file_name"
    printf "%s" "$google_html" > $html_location
    printf "HTML for \"$query\" -> $html_location\n"
    exit 0
fi

# Prints location after snippet is called
if $location; then
    modifyloc
fi


## WARNING: Never put Define after Rich Answers, since it :will get only the word itself ##
## Snippet Priority ##
# Did you mean
# Basic Answers
# Define
# Rich Answers
# Featured Snippets
# Math
# Lyrics
# Weather
# Translate
# Rich list
# Recommended Media
# Knowledge Graph - top
# Knowledge Graph - right
# Units Convertion
# Currency Convertion


# did you mean ( eg: linux torvalds ) Because we all know his real name is linux, not linus.
# silenced if quiet=true
if [ $quiet = "false" ]; then
    did_you_mean="$(echo "$google_html" | pup 'a.gL9Hy > b text{}' | sed ':a;N;$!ba;s/\n/ /g' | recd)"
    [ -n "$did_you_mean" ] && info_msg "Did you mean $did_you_mean?"
fi


# Basic Answers ( eg: tuxi christmas day )
basic="$(echo "$google_html" | pup 'div.zCubwf text{}' | tr -d '\n' | recd)"
snipcall "$basic"


# Define (eg: define Aggrandize)
define="$(echo "$google_html" | pup 'div.DgZBFd, div.vdBwhd, div[data-dobid="dfn"] text{}' | sed -e 's/^/* /' -e '1 s/^* //' | recd)"
snipcall "$define"


# Chem facts ( eg: density of silver, density of hydrogen, what is the triple point of oxygen)
#"what is the " seems to be required for some things
kno_val=$(echo "$google_html" | pup 'div.Z0LcW.XcVN5d text{}'| tr '\n' ' ' )
snipcall "$kno_val"


# Math ( eg: log_2(3) * pi^e )
math="$(echo "$google_html" | pup 'span.qv3Wpe text{}' | tr -d '\n ')"
snipcall "$math"

# Featured Snippets ( eg: who is garfield )
feat="$(echo "$google_html" | pup 'span.hgKElc text{}' | tr -d '\n' | recd | tr ' ' '\0' | xargs -0 -n10)"
snipcall "$feat"


# Translate ( eg: Vais para cascais? em ingles )
trans="$(echo "$google_html" | pup 'pre.XcVN5d span:first-child json{}' | jq -r '.[1] | .text' | sed 's/null//g' | recd)"
snipcall "$trans"


# Rich Rich Answers ( eg: social network cast )
richcast=$(echo "$google_html" | pup 'a.ct5Ked json{}' | jq -r '.[] | .title' | sed 's/^/* /' | recd)
snipcall "$richcast"


# Simple lists (eg Need for Speed Heat cars list)
rich=$(echo "$google_html" | pup 'li.TrT0Xe text{}' | sed -e 's/^ //' -e 's/^/* /' -e 's/\.$//' | recd)
snipcall "$rich"


# This serves for a lot of things, simplified for performance
# Rich Answers      ( eg: elevation of mount everest )
# bbVIQb & ujudUb   ( eg: gecgecgec lyrics )                 ( Lyrics )
# mR2g0d            ( eg: game of thrones s03 episodes )     ( Somewhat complicated lists )
rich=$(echo "$google_html" | pup 'div.bbVIQb, div.ujudUb, div.mR2gOd, div.XcVN5d text{}' | sed 's/^ //' | recd)
snipcall "$rich"

# works with a bunch of tested songs, previous one didnt work with some songs, i.e. "adele hello lyrics"
# only problem is that it includes the "...More", and idk how to remove it from the variable
# "..More" is only visible for a few locations, please provide which one is giving you this and the output





# Weather ( eg: weather new york)
weather="$(echo "$google_html" | pup 'div.TylWce text{}' | sed -e '1 s/$/ ºC/' -e '2 s/$/ ºF/' | recd)"
snipcall "$weather"


# Recommended Media ( eg: anime film suggestions )
snipcall "pup 'div.wDYxhc.NFQFxe div.fl.ellip.oBrLN.S1gFKb.rOVRL' text{} | sed 's/^/* /' | recode html..ISO-8859-1"


# Knowledge Graph - top (list) ( eg: the office cast )
kno_top=$(echo "$google_html" | pup 'div.dAassd json{}'  | jq -r '.[] | .children | .[] | .text' | sed ':a;N;$!ba;s/\n/ /g' | sed 's/null/\n/g' | awk '{$1=$1;print "* " $0}' | sed '/^* $/d'| recd)
snipcall "$kno_top"


# Knowledge Graph - right ( eg: the office )
kno_right="$(echo "$google_html" | pup 'div.kno-rdesc span' | sed -n '2p' | awk '{$1=$1;print}' | recd | tr ' ' '\0' | xargs -0 -n10)"
snipcall "$kno_right"


# Units Conversion ( eg: 1m into 1 cm )
unit="$(echo "$google_html" | pup '#NotFQb json{}' | jq -r '.[] | .children | .[0] | .value' | recd)"
snipcall "$unit"


# Currency Conversion ( eg: 1 USD in rupee )
currency="$(echo "$google_html" | pup '.SwHCTb text{}' | tr -d '\n' | tr ' ' '\0' | recd)"
snipcall "$currency"


# Else
if [ "$all" = "false" ]; then
    error_msg "No Result!" && exit 1
fi
